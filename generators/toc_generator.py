# ============================================================================
# File: generators/toc_generator.py
# Completely generic TOC generator - no opinions, just passes data to LLM
# ============================================================================

from typing import Dict, Any
from services.llm_service import LLMService
from models.toc_models import TableOfContents
import logging

logger = logging.getLogger(__name__)

class TOCGenerator:
    def __init__(self, model: str = "openai/gpt-oss-20b:free"):
        self.llm = LLMService(model=model)
    
    def generate_toc(self, 
                     domain: str, 
                     user_preferences: Dict[str, Any], 
                     domain_prompt: str) -> TableOfContents:
        """
        Generate Table of Contents using domain-specific prompt
        
        This is a completely generic wrapper - it doesn't make any decisions
        about the curriculum. All logic is delegated to the LLM via the domain prompt.
        
        Args:
            domain: Domain identifier (e.g., 'data_science', 'cat_exam')
            user_preferences: Complete user preferences from onboarding
            domain_prompt: Domain-specific prompt template
            
        Returns:
            TableOfContents: Structured TOC generated by LLM
        """
        
        # Simple system prompt that doesn't bias the LLM
        system_prompt = f"""You are an expert curriculum designer for {domain}. 
        
        Your job is to create a personalized Table of Contents that perfectly matches 
        the user's stated preferences and goals. 
        
        Be completely responsive to their:
        - Learning goals and objectives
        - Experience level and background
        - Time constraints and availability  
        - Learning style preferences
        - Technical background
        
        Do not impose any predetermined structure or bias. Let their preferences 
        guide every decision about topics, depth, difficulty, and focus areas.
        
        Generate a comprehensive yet personalized curriculum that they will actually 
        want to follow and complete.
        
        Return valid JSON that matches the required schema exactly."""
        
        logger.info(f"Generating TOC for domain: {domain}")
        logger.debug(f"User preferences keys: {list(user_preferences.keys())}")
        
        try:
            toc = self.llm.generate_structured(
                system_prompt=system_prompt,
                user_prompt=domain_prompt,
                response_model=TableOfContents,
                temperature=0.7  # Allow creativity while staying structured
            )
            
            logger.info(f"Successfully generated TOC with {len(toc.topics)} topics")
            logger.info(f"Total estimated hours: {toc.total_estimated_hours}")
            
            return toc
            
        except Exception as e:
            logger.error(f"Failed to generate TOC: {str(e)}")
            raise Exception(f"TOC generation failed: {str(e)}")
    
    def set_model(self, model: str):
        """Switch LLM model"""
        self.llm.set_model(model)
        logger.info(f"TOC Generator switched to model: {model}")